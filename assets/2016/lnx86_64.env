#-*- mode: python -*-

#############################################################################
#                                                                           #
#    Compile and Link command settings for the Linux 64 Platform            #
#                 ( AMD Opteron / Intel EM64T )                             #
#                                                                           #
#############################################################################

import os, re, glob, driverUtils

#MPI implementation handling
mpiCppImpl = ''
mp_rsh_command = 'ssh -n -l %U %H %C'
mp_mpi_implementation = PMPI #Platform MPI
#mp_mpi_implementation = IMPI #<--- Uncomment this line and comment out prior definition to switch to IMPI (Intel)
#mp_mpi_implementation = CMPI #<--- Uncomment this line and comment out prior definition to switch to CMPI (Cray)
if mp_mpi_implementation == PMPI:
    pmpipath = driverUtils.locateFile(os.environ.get('ABA_PATH', ''), 'pmpi-9.1.2/bin', 'mpirun')
    mp_mpirun_path = {PMPI: pmpipath}
    mpiCppImpl = '-DABQ_MPI_PMPI'
    mpiLnkImpl = "-lmpi"
if mp_mpi_implementation == IMPI:
    impipath = driverUtils.locateFile(os.environ.get('ABA_PATH', ''), 'impi/bin', 'mpiexec.hydra')
    mp_mpirun_path = {IMPI: impipath}
    mpiCppImpl = '-DABQ_MPI_IMPI'
    mpiLnkImpl = "-limpi -lmpifort"
if mp_mpi_implementation == CMPI:
    cmpipath = driverUtils.locateFile(os.environ.get('ABA_PATH', ''), 'impi/bin', 'mpiexec.hydra')
    mp_mpirun_path = {CMPI: cmpipath}
    mpiCppImpl = '-DABQ_MPI_CMPI'
    mpiLnkImpl = "-limpi -lmpifort"    
    mp_file_system = (SHARED, SHARED)
    
fortCmd = "gfortran"   # <-- Fortran compiler
cppCmd  = "gcc"     # <-- C++ compiler

# Avoid signal trapping by the Fortran RTE
os.environ["FOR_IGNORE_EXCEPTIONS"] = "1"
# Disable messages from the Fotran RTE
os.environ["FOR_DISABLE_STACK_TRACE"] = "1"

# Do not let QLogic InfiniPath driver set processor affinity.
os.environ["IPATH_NO_CPUAFFINITY"] = "1"

# Add the flag "-free" to the compile_fortran command below to use free-format FORTRAN 90 syntax.

compile_fortran = [fortCmd,
                   '-c', '-fPIC', '-extend_source',
                   '-cpp', '-I%I']

# Additional command-line options for the Intel C/C++ Compilers:
# '-cxxlib', '-Kc++eh', '-Krtti', '-Kc++', '-pc64', '-restrict', '-i-dynamic',
# '-we1011', '-we120',  '-we117', '-we556', '-we144', '-we268', '-we1224', '-we167', '-we880'

compile_cpp = [cppCmd,
               '-c', '-fPIC', '-w', '-Wno-deprecated', '-DTYPENAME=typename',
               '-D_LINUX_SOURCE', '-DABQ_LINUX', '-DABQ_LNX86_64', '-DSMA_GNUC',
               '-DFOR_TRAIL', '-DHAS_BOOL', '-DASSERT_ENABLED',
               '-D_BSD_TYPES', '-D_BSD_SOURCE', '-D_GNU_SOURCE',
               '-D_POSIX_SOURCE', '-D_XOPEN_SOURCE_EXTENDED', '-D_XOPEN_SOURCE',
               '-DHAVE_OPENGL', '-DHKS_OPEN_GL',  '-DGL_GLEXT_PROTOTYPES',
               '-DMULTI_THREADING_ENABLED', '-D_REENTRANT',
               '-DABQ_MPI_SUPPORT', '-DBIT64', '-D_LARGEFILE64_SOURCE', '-D_FILE_OFFSET_BITS=64', '%P',                
               mpiCppImpl,
               # '-O0', # <-- Optimization level
               # '-g',  # <-- Debug symbols
               '-I%I']

compile_fmu = [cppCmd,
               '-c', '-fPIC','-I%I']

link_fmu = [cppCmd,
            '-fPIC', '-shared', '-o', '%J', '%M']

link_sl = [fortCmd,
           '-fPIC', '-shared',
           '%E', '-Wl,-soname,%U', '-o', '%U', '%F', '%A', '%L', '%B',
           '-Wl,-Bdynamic', '-lifport', '-lifcoremt', '-lsvml', '-lirc', mpiLnkImpl]

link_exe = [cppCmd,
            '-fPIC',
            '-Wl,-Bdynamic', '-o', '%J', '%F', '%M', '%L', '%B', '%O', '-lpthread', '-limf', '-lifcoremt', '-lsvml', '-lirc', '-lgfortran', '-lstdc++']

# Remove the temporary names from the namespace
del cppCmd
del fortCmd
del mpiCppImpl
del mpiLnkImpl
if mp_mpi_implementation == PMPI:
    del pmpipath
if mp_mpi_implementation == IMPI:    
    del impipath
if mp_mpi_implementation == CMPI:    
    del cmpipath    
# Avoid CAE display issues due to compositing window animations
if not os.environ.has_key('XLIB_SKIP_ARGB_VISUALS'):
    os.environ['XLIB_SKIP_ARGB_VISUALS'] = '1'
